<?php
/**
 * Uses BlueFire's Checkout API to process payments following a FormBuilder form submission, redirecting to BlueFire's site for payment.
 * BlueFire does not have a test mode for the Checkout API, but you can contact them to request they put your account in demo mode.
 *
 * @todo: Add checkbox to FormBuilder config to enable/disable payment on per form basis?
 * @todo: Auto-include payment JS file with forms
 */
class FormBuilderBlueFire extends WireData implements Module, ConfigurableModule
{

	public static function getModuleInfo()
	{
		return array(
			'title' => 'Form Builder BlueFire Integration',
			'author' => 'Mike Spooner (thetuningspoon), Solution Innovators',
			'version' => 001,
			'summary' => 'BlueFire Payment Integration for ProcessWire FormBuilder',
			'singular' => true,
			'autoload' => true,
			'installs' => array(),
			'requires' => array('FormBuilder'),
			'icon' => 'money',
		);
	}

	// Default configuration options (will be overwritten by user config)
	static public function getDefaultData() {
		return array(
			'test_mode' => 0,
			'endpoint_url' => 'https://secure.gobluefire.com/go/cf/checkout.php',
			'api_key' => '',
			'form_id' => '',
			'redirect_page' => '',
		);
	}

	public function __construct() {
		// Set defaults (which may be overwritten by user settings)
		foreach(self::getDefaultData() as $key => $value) {
			$this->$key = $value;
		}
	}

	public function init()
	{
		$this->addHookAfter('FormBuilderProcessor::formSubmitSuccess', $this, 'paymentRedirect');
		$this->addHookBefore('FormBuilderProcessor::saveForm', $this, 'turnOffEmails');

		/**
		 * Adds documentation for pricing fields to FormBuilder
		 */
		$this->addHookAfter('ProcessFormBuilder::buildEditFormFields', function($event) {
			$fieldset = $event->return;

			$text = "
			<ul style='font-size: .8em;'>
				<li><strong>total</strong> (type: Text or Hidden) - This field is required to enable pricing on any form. It will show the calculated total to the user and record it in the database. Set this to Hidden and create a *_amount field (see below) if you want the user to be able to adjust the price.</li>
				<li><strong>*_amount</strong> (type: Text) - Any field with \"_amount\" appended to the field name will be added to the total.</li>
				<li><strong>base_price</strong> (type: Hidden) - The base price for the form if no options are included</li>

				<li><strong>number_of_adults</strong> (type: Integer) - Field to record the number of adults the user wants to register (use in conjunction with adult_price)</li>
				<li><strong>number_of_youth</strong> (type: Integer) - Field to record the number of youth the user wants to register (use in conjunction with youth_price)</li>
				<li><strong>number_of_children</strong> (type: Integer) - Field to record the number of children the user wants to register (use in conjunction with children_price)</li>
				<li><strong>adult_price</strong> (type: Hidden) - Price per adult being registered (use in conjunction with number_of_adults)</li>
				<li><strong>youth_price</strong> (type: Hidden) - Price per youth being registered (use in conjunction with number_of_youth)</li>
				<li><strong>child_price</strong> (type: Hidden) - Price per child being registered (use in conjunction with number_of_children)</li>
				<li><strong>max_price</strong> (type: Hidden) - Use this to limit the total cost to a maximum, regardless of what options/attendees are selected</li>
				<li><strong>min_price</strong> (type: Hidden) - Use this to make sure the price does not drop below a certain threshold, regardless of what options are selected</li>
				<li><strong>amount_paid</strong> (type: Hidden) - The amount paid online, confirmed by the payment processor</li>
				<li><strong>item_name</strong> (type: Hidden) - The item name to pass to the payment provider, to describe the product/service being sold</li>
				<li><strong>transaction_id</strong> (type: Hidden) - An empty field to record the unique transaction id returned from the payment provider</li>
				<li><strong>payment_status</strong> (type: Hidden) - An empty field to record the status (i.e. \"Completed\") returned from the payment provider</li>
			</ul>

			<p><em>Fields that will be passed to pre-populate the off-site payment form: first_name, last_name, street_address, city, state, zip_code, email_address, phone_number</em></p>
			";


			$instructions = new InputfieldMarkup();
			$instructions->icon = 'info-circle';
			$instructions->label = 'Payment Integration Instructions';
			$instructions->description = 'The following fields may be added to the form to enable and manage pricing. All fields except "total" are optional.';
			$instructions->notes = "To give options a price, create a radio button or select field and set the value of the option to the price you wish to add to the total (leave out currency symbols)";
			$instructions->set('markupText', $text);

			$fieldset->append($instructions);

			$event->return = $fieldset;
		});
	}

	public function ready() {
	}

	/**
	 * Prevents emails from sending if this is a payment form, so that we can manually trigger the emails after payment is confirmed
	 */
	public function turnOffEmails(HookEvent $event) {
		$form = $event->arguments[0];
		$that = $event->object;

		if($form->get('total')) {
			$that->saveFlags &= ~FormBuilderProcessor::saveFlagEmail; // Turn off the bitwise admin email flag
			$that->saveFlags &= ~FormBuilderProcessor::saveFlagResponder; // Turn off the bitwise user email flag
		}
	}

	/**
	 * Passes data from formBuilder fields to BlueFire and performs the redirect
	 */
	public function paymentRedirect(HookEvent $event) {
		$that = $event->object;
		$inputfields = $event->arguments(0);

		if(!$inputfields->get('total')) return; // Total field must exist and have a value in order for redirect to occur

		$data = array();
		// Pull the sanitized data from the fields we want to send to the payment processor
		$data['rid'] = $this->form_id;
		$data['orderId'] = $that->getEntryID() . ',' . $that->formName; // Include both the entry ID and form name in orderID as CSV
		$data['total'] = $inputfields->get('total')->value;
		$data['time'] = time();
		$data['clientIp'] = $_SERVER['REMOTE_ADDR'];
		if(!empty($this->redirect_page)) $data['redirect'] = $this->pages->get($this->redirect_page)->httpUrl;
		$data['descrip'] = $inputfields->get('item_name')->value; /*str_replace('-', ' ', $event->that->formName)*/

		// Create the signature hash
		$queryToHash = http_build_query($data);
		$signature = hash('sha256', $queryToHash . $this->api_key);

		if($this->test_mode) $data['test'] = 'true'; // This does nothing on the checkout API

		// Prepopulate BlueFire payment fields
		$data['firstName'] = $inputfields->get('first_name')->value;
		$data['lastName'] = $inputfields->get('last_name')->value;
		$data['add1'] = $inputfields->get('street_address')->value;
		$data['city'] = $inputfields->get('city')->value;
		$data['state'] = $inputfields->get('state')->value;
		$data['zip'] = $inputfields->get('zip_code')->value;
		$data['email'] = $inputfields->get('email_address')->value;
		$data['phone'] = $inputfields->get('phone_number')->value;

		$data['signature'] = $signature; // Add the signature hash to the end of the url

		// Redirect to BlueFire for Payment
		$queryString = http_build_query($data);
		wire('session')->redirect($this->endpoint_url . '?' . $queryString);

	}


	/**
	 * Updates the entries database to confirm payment was successful and sends confirmation emails. This must be called manually from the template of your payment confirmation page using $modules->FormBuilderBlueFire->processCompletedPayment()
	 *
	 * @param WireArray $rawResponse - The response from the payment processor (the $input->get or $input->post WireArray)
	 * @return Array $fieldArray - Returns the updated form entry if the response was valid and payment was successful, or false if not
	 */
	public function processCompletedPayment(WireArray $rawResponse = null) {
		if(empty($rawResponse)) $rawResponse = $this->input->get;

		// Assign response data from BlueFire to local variables
		$response = array();
		$response['transId'] = $this->sanitizer->text($rawResponse->transId);
		$response['orderId'] = $this->sanitizer->text($rawResponse->orderId);
		$response['total'] = $this->sanitizer->float($rawResponse->total);

		$orderIdArray = explode(',', $response['orderId']);
		if(count($orderIdArray) == 2) {
			$entryId = (int) $orderIdArray[0];
			$formName = $orderIdArray[1];
		}
		else return false; // Exit function if orderIdArray doesn't contain 2 values

		if(!$entryId || !$formName) return false; // Exit if $entryId or $formName are not present

		// Compare the signature in the response to the rest of the data in the response to make sure the data hasn't been tampered with
		$responseSignature = $rawResponse->signature;
		$testSignature = hash('sha256', http_build_query($response) . $this->api_key);

		if($responseSignature != $testSignature) return false; // Exit function if signature doesn't match

		// Grab the array of fields from the form entry with the ID we received
		$fieldArray = $this->forms->get($formName)->entries->get($entryId);

		if($fieldArray['payment_status'] != 'PAID') {
			// Update payment status
			$fieldArray['payment_status'] = 'PAID'; // Mark the payment complete
			// Update the amount_paid field based on the amount that was received in the response data
			$fieldArray['amount_paid'] = $response['total'];
			// Update the transaction_id field based on the transaction ID received
			$fieldArray['transaction_id'] = $response['transId'];

			// Save the updated array back to the database
			$this->forms->get($formName)->entries->save($fieldArray);

			// Send Emails - We turned off emails in turnOffEmails() so we could delay sending them until the payment has been completed
			$form = $this->forms->get($formName);
			$processor = $form->processor();
			$entries = $form->entries();
			$entry = $entries->get($entryId);
			$processor->populate($entry, $entryId);
			$inputfields = $processor->getInputfieldsForm();

			if($processor->saveFlags & FormBuilderProcessor::saveFlagEmail) $processor->emailForm($inputfields, array()); // Send to admin (if enabled)
			if($processor->saveFlags & FormBuilderProcessor::saveFlagResponder) $processor->emailFormResponder($inputfields, array()); // Send to user (if enabled)
		}

		return $fieldArray;
	}

	public static function getModuleConfigInputfields(array $data) {

		$data = array_merge(self::getDefaultData(), $data); // Merge the defaults with the custom data, preferring custom

		$inputfields = new InputfieldWrapper();

		/*
		$field = wire('modules')->get('InputfieldCheckbox');
		$field->label = __("Test Mode");
		$field->name = "test_mode";
		$field->value = 1;
		$field->attr('checked', !empty($data['test_mode']) ? 'checked' : '');
		$inputfields->add($field);
		*/

		$field = wire('modules')->get('InputfieldURL');
		$field->label = __("Endpoint URL");
		$field->name = "endpoint_url";
		$field->value = $data['endpoint_url'];
		$inputfields->add($field);

		$field = wire('modules')->get('InputfieldText');
		$field->label = __("API Key");
		$field->name = "api_key";
		$field->value = $data['api_key'];
		$inputfields->add($field);

		$field = wire('modules')->get('InputfieldText');
		$field->label = __("BlueFire Form ID");
		$field->name = "form_id";
		$field->value = $data['form_id'];
		$inputfields->add($field);

		$field = wire('modules')->get('InputfieldPageListSelect');
		$field->label = __("Redirect/Payment Confirmation Page");
		$field->name = "redirect_page";
		$field->value = $data['redirect_page'];
		$inputfields->add($field);

		return $inputfields;
	}


	public function install() {}

	public function uninstall() {}

}